#!/bin/sh
#\
exec tclsh "$0" "$@"

# Copyright (C) 2012 netlabs: www.netlabs.com.uy
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#

if {[package vcompare $::tcl_version 8.5] < 0} {
  # need tclsh 8.5 at least
  if {![catch {exec -ignorestderr tclsh8.5 $::argv0}]} {
    exit
  } elseif {![catch {exec -ignorestderr tclsh8.6 $::argv0}]} {
    exit
  } else {
    puts stderr "Tcl 8.5 (or newer) required!"
    exit 1
  }
}

namespace eval sshfu {}

proc sshfu::import_ssh_config {outfd} {
  set fd [open ~/.ssh/config r]
  set host ""
  set params [dict create]
  foreach line [split [read $fd] "\n"] {
    set line [regsub {^[[:space:]]*(#.*)?} $line ""]
    if {$line eq ""} continue
    regexp {([^[:space:]]*)(?:[[:space:]]+(.*?)[[:space:]]*)?$} $line -> cmd opts
    switch -exact [string tolower $cmd] {
      host {
	set host $opts
      } hostname {
	dict set params $host address $opts
      } serveraliveinterval {
	dict set params $host keepalive $opts
      } identityfile {
	if {[regexp {^~/.ssh/(.*)$} $opts -> part]} {
	  dict set params $host key $part
	} else {
	  dict set params $host i $opts
	}
      } compression {
	dict set params $host comp $opts
      } compressionlevel {
	dict set params $host level $opts
      } forwardagent {
	dict set params $host agent $opts
      } proxycommand {
	if {[regexp {^ssh (.*) -W %h:%p$} $opts -> gw] || \
	    [regexp {^ssh (.*) nc %h %p$} $opts -> gw]} {
	  dict set params $host gw $gw
	} elseif {[regexp {^(.*) %h %p$} $opts -> pcmd]} {
	  dict set params $host proxy $pcmd
	} else {
	  dict set params $host ProxyCommand $opts
	}
      } user - port {
	dict set params $host [string tolower $cmd] $opts
      } default {
	dict set params $host $cmd $opts
      }
    }
  }
  dict for {host p} $params {
    puts $outfd "host $host [lsort -stride 2 $p]"
  }
  close $fd
}

proc sshfu::autodetect_config {} {
  if {![file exists ~/.ssh/sshfu]} {
    file mkdir ~/.ssh/sshfu
    catch {file copy ~/.ssh/config ~/.ssh/original_ssh_config}
    set fd [open ~/.ssh/sshfu/ssh_config.head "a"]
    close $fd
    set fd [open ~/.ssh/sshfu/ssh_config.tail "a"]
    close $fd
  }

  if {![file exists ~/.ssh/sshfu/routes]} {
    set fd [open ~/.ssh/sshfu/routes w]
    puts $fd [regsub -all -lineanchor {^\n *|^ *} {
      # sshfu configuration file
      #
      # This file along with the contents of ssh_config.head and
      # ssh_config.tail are compiled into you ~/ssh/config
      #
      # supported keywords: host, address, gw, user, port, key, i, keepalive,
      # comp, level, agent, proxy, tags
      #
      # host server address server.dns.test port 8
      # host laptop address 192.168.2.1 gw server key id_rsa2
      # host myvm address 10.10.1.1 gw laptop i ~/Documents/keys/myvm
      # host * user root keepalive 60 
      #
      # have fun (and don't make any mistakes unless you 
      # want to blow you head)
      # 
    } ""]
    if {[file readable ~/.ssh/config]} {
      sshfu::import_ssh_config $fd
    }
    puts $fd ""
    close $fd
  }
}

set sshfu::gateway_of {}
set sshfu::default_opts {}

proc host {hostname args} {
  include "Host $hostname"
  foreach {opt val} [lsort -stride 2 [dict merge $sshfu::default_opts $args]] {
    switch -- $opt {
      address	{include "  HostName $val"}
      gw	{
	include "  ProxyCommand ssh $val -W %h:%p"
	dict set sshfu::gateway_of $hostname $val
      }
      user	{include "  User $val"}
      port	{include "  Port $val"}
      key	{include "  IdentityFile ~/.ssh/$val"}
      i		{include "  IdentityFile $val"}
      comp	{include "  Compression $val"}
      level	{include "  CompressionLevel $val"}
      agent	{include "  ForwardAgent $val"}
      keepalive	{include "  ServerAliveInterval $val"}
      proxy	{include "  ProxyCommand $val %h %p"}
      tags	{include "  # Tags: [lsort $val]"}
      default	{include "  $opt $val"}
    }
  }
  include ""
}

proc sshfu::detect_cycles {} {
  set avail $sshfu::gateway_of
  set visited {}
  dict for {host gw} $avail {break}
  while {[dict size $avail] > 0} {
    dict for {host gw} $avail {break}
    while {$host ne "" && [dict exists $avail $host]} {
      set gw [dict get $avail $host]
      dict set visiting $host 1
      dict unset avail $host
      if {[dict exists $visiting $gw]} {
	puts "Warning: loop detected on host \"$host\", visiting: $visiting"
      }
      set host $gw
    }
    set visiting {}
  }
}

proc include {text} {
  puts $sshfu::configfd $text
}

# syntax:
#  inside ctx1 code1
#  inside ctx1 or ctx2 code1
#  inside ctx1 or ctx2 code1 ctx3 code3 otherwise code
#  inside ctx1 {or ctxN} code1 {ctx1M {or ctxNM} codeM} otherwise code
proc inside {args} {
  set params {}
  foreach {ctx code} $args {
    if {$code eq "or"} {
      lappend params "x$ctx" -
    } elseif {$ctx eq "otherwise"} {
      lappend params default $code
    } else {
      lappend params "x$ctx" $code
    }
  }
  uplevel [list switch -exact -- $::CONTEXT $params]
}

proc with {args} {
  if {[llength $args] % 2} {
    set old_opts $sshfu::default_opts
    set sshfu::default_opts [dict merge $sshfu::default_opts [lrange $args 0 end-1]]
    uplevel [lindex $args end]
    set sshfu::default_opts $old_opts
  } else {
    set sshfu::default_opts [dict merge $sshfu::default_opts $args]
  }
}

if {![info exists env(DONT_RUN)]} {
  sshfu::autodetect_config

  if {![info exists env(DONT_EDIT)]} {
    if {[info exists env(EDITOR)]} {
      exec $env(EDITOR) [file normalize ~/.ssh/sshfu/routes] >@stdout
    } else {
      exec vi [file normalize ~/.ssh/sshfu/routes] >@stdout
    }
  }

  file copy -force ~/.ssh/config ~/.ssh/config~
  set sshfu::configfd [open ~/.ssh/config "w"]
  if {![catch {open ~/.ssh/sshfu/ssh_config.head} fd]} {
    fcopy $fd $sshfu::configfd
  }
  source ~/.ssh/sshfu/routes
  if {![catch {open ~/.ssh/sshfu/ssh_config.tail} fd]} {
    fcopy $fd $sshfu::configfd
  }
  close $sshfu::configfd

  sshfu::detect_cycles
}
