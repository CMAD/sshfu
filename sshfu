#!/bin/sh
#version="0.2beta" 

if ! which m4 >> /dev/null; then 
  echo You need m4 installed to run sshfu
  exit 1
fi

autoinstall(){
echo "running autoinstall..." >&2

echo "trying to copy the script to /usr/local/bin using normal cp" >&2
cp "$0" /usr/local/bin/sshfu 

if [ "$?" -ne 0 ]; then
  echo "it didn't work, trying to use sudo..." >&2 
  sudo cp "$0" /usr/local/bin/sshfu && echo ... ok. >&2 && return 0
else
  echo ... ok. >&2
  return 0
fi

echo "didn't work either, trying su" >&2
local origin=$PWD
su - root -c "cp $origin/$0 /usr/local/bin/sshfu" 

if [ "$?" -ne 0 ]; then
  echo "didn't work, plase install manually." >&2
  exit 1
fi

echo ... ok. >&2
}

vimsyntax() {
mkdir -p ~/.vim/syntax
cp ./misc/sshfu.vim ~/.vim/syntax
cat <<EOF >> ~/.vimrc

" sshfu syntax highliting (autoinstalled)
au BufNewFile,BufRead ~/.ssh/sshfu/routes set filetype=sshfu

EOF
}

if [ ! -d ~/.ssh/sshfu ]; then

  if ! which sshfu; then
    autoinstall
  fi

  if [ -e ./misc/sshfu.vim ] && [ ! -e ~/.vim/syntax/sshfu.vim ]; then
    vimsyntax
  fi

  cp ~/.ssh/config ~/.ssh/original_ssh_config 2>&1 > /dev/null
  mkdir -p ~/.ssh/sshfu
  touch ~/.ssh/sshfu/ssh_config.head
  touch ~/.ssh/sshfu/ssh_config.tail

fi

cd ~/.ssh/sshfu

if [ ! -e routes ]; then
cat <<EOF > routes
#sshfu ssh routes
#this file along with the contents of ssh_config.head and
#ssh_config.tail are compiled into you ~/ssh/config
#
#this is a litte less verbose syntax for managing hosts
#than raw ssh_config is.
#
#examples:
#
#host server addres server.dns.test user root port 8
#host laptop address 192.168.2.1 gw server user foo
#host myvm address 10.10.1.1 gw laptop key id_rsa2
#
# have fun (and don't make any mistakes unless you 
# want to blow you head)
EOF
fi

comp_ssh_config() {
umask 022
cat ssh_config.head > ssh_config
cat routes | sed 's/\([^ ]\{1,\}\) \([^ ]\{1,\}\)/\1\(\2\)/g;/^#/d;/^$/d'| m4 \
  -D host='Host $1
' -D address='HostName $1
' -D gw='ProxyCommand ssh $1 -W %h:%p
' -D user='User $1
' -D port='Port $1
' -D key='IdentityFile ~/.ssh/$1
' -D keepalive='ServerAliveInterval $1
' >> ssh_config
cat ssh_config.tail >> ssh_config
}

"${EDITOR-vi}" routes

comp_ssh_config
cp ../config ../config~
cp ssh_config ../config
